/***********************************************************************************************************
 ===========================================================================================================
 Name        :  mini_project 2
 Author      :  AHMED ADLY
 date        :  4/2/2024
 Description :  Stop Watch system
 ===========================================================================================================
 ***********************************************************************************************************/
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

volatile unsigned secound = 0;
volatile unsigned minute = 0;
volatile unsigned hour = 0;

//  Timer1 initialize Function
void TIMER1_Init(void) {
    TCCR1A |= (1 << FOC1A) | (1 << FOC1B);
    TCCR1B |= (1 << WGM12) | (1 << CS10) | (1 << CS11); // CTC mode, 64 prescaler
    TCNT1 = 0;
    OCR1A = 15625; //   1 second interrupt Value
    TIMSK |= (1 << OCIE1A); //  interrupt Enable when compare matches
    SREG |= (1 << 7); // Enable global interrupt
}

// Timer1  compare match Interrupt service routine
ISR(TIMER1_COMPA_vect) {
    secound++;

    if (secound == 60) {
        secound = 0;
        minute++;
    }

    if (minute == 60) {
        secound = 0;
        minute = 0;
        hour++;
    }

    if (hour == 12) {
        secound = 0;
        minute = 0;
        hour = 0;
    }
}

//  External interrupt 0 initialize Function for reset button
void INT0_Init_RESET(void) {
    DDRD &= ~(1 << PD2); // Set PD2 as input pin
    PORTD |= (1 << PD2); // Activate internal pull-up
    MCUCR |= (1 << ISC01); // Enable interrupt with falling edge
    GICR |= (1 << INT0); // Enable external interrupt 0
    SREG |= (1 << 7); // Enable global interrupt
}

//  External interrupt 0 Interrupt service routine
ISR(INT0_vect) {
    secound = 0;
    minute = 0;
    hour = 0;

    TCCR1B |= (1 << CS10) | (1 << CS11); // Resume timer
}

//  External interrupt 1 initialize Function for Pause button
void INT1_Init_PAUSED(void) {
    DDRD &= ~(1 << PD3); // Set PD3 as input pin
    MCUCR |= (1 << ISC10) | (1 << ISC11); // Enable interrupt with rising edge
    GICR |= (1 << INT1); // Enable external interrupt 1
    SREG |= (1 << 7); // Enable global interrupt
}

//  external interrupt 1 Interrupt service routine
ISR(INT1_vect) {
    // Disable clock when paused to stop the timer
    TCCR1B &= ~(1 << CS10);
    TCCR1B &= ~(1 << CS11);
    TCCR1B &= ~(1 << CS12);
}

//  External interrupt 2 initialize Function for resume button
void INT2_Init_RESUME(void) {
    DDRB &= ~(1 << PB2); // Set PB2 as input pin
    PORTD |= (1 << PB2); // Activate internal pull-up
    MCUCR &= ~(1 << ISC2); // Enable interrupt with falling edge
    GICR |= (1 << INT2); // Enable external interrupt 2
    SREG |= (1 << 7); // Enable global interrupt
}

// External interrupt 2 Interrupt service routine
ISR(INT2_vect) {
    // Resume timer
    TCCR1B |= (1 << CS10) | (1 << CS11);
}

// Function to update the display
void update_display(void) {
    // Display seconds
    PORTA = (1 << 5);
    PORTC = secound % 10;
    _delay_ms(1);

    // Set the dot for the first 7-segment display
    PORTC = 0x80; // 0b10000000

    // Display tens of seconds
    PORTA = (1 << 4);
    PORTC = secound / 10;
    _delay_ms(1);

    // Set the dot for the second 7-segment display
    PORTC = 0x80; // 0b10000000

    // Display minutes
    PORTA = (1 << 3);
    PORTC = minute % 10;
    _delay_ms(1);

    // Set the dot for the third 7-segment display
    PORTC = 0x80; // 0b10000000

    // Display tens of minutes
    PORTA = (1 << 2);
    PORTC = minute / 10;
    _delay_ms(1);

    // Set the dot for the fourth 7-segment display
    PORTC = 0x80; // 0b10000000

    // Display hours
    PORTA = (1 << 1);
    PORTC = hour % 10;
    _delay_ms(1);

    // Set the dot for the fifth 7-segment display
    PORTC = 0x80; // 0b10000000

    // Display tens of hours
    PORTA = (1 << 0);
    PORTC = hour / 10;
    _delay_ms(1);
}


int main(void) {
    DDRC = 0x0F; //  lower 4 bits of PORTC Set as output
    PORTC = 0x00; //  PORTC Initialize
    DDRA = 0xFF; //  PORTA Set as output
    PORTA = 0xFF; //  PORTA Initialize
    // Initialize interrupts and timer
    INT0_Init_RESET();
    INT1_Init_PAUSED();
    INT2_Init_RESUME();
    TIMER1_Init();

    while (1) {
        update_display(); //  update the display
    }

    return 0;
}
