#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

volatile uint8_t seconds = 0;
volatile uint8_t minutes = 0;
volatile uint8_t hours = 0;
volatile uint8_t stopwatch_running = 0; // Flag to indicate if stopwatch is running

// Function to initialize Timer1 in CTC mode
void timer1_init() {
    // Set CTC mode
    TCCR1B |= (1 << WGM12);

    // Set prescaler to 64
    TCCR1B |= (1 << CS10) | (1 << CS11);

    // Set compare value for 1Hz (1 second interrupt)
    OCR1A = 15624;

    // Enable Timer1 compare match A interrupt
    TIMSK |= (1 << OCIE1A);
}

// Function to initialize external interrupts
void external_interrupt_init() {
    // Enable external interrupts INT0 (Resume)
    GICR |= (1 << INT0);

    // Set INT0 to trigger on falling edge
    MCUCR |= (1 << ISC01) | (0 << ISC00);

    // Enable global interrupts
    sei();
}

// External Interrupt Service Routine for INT0 (Resume)
ISR(INT0_vect) {
    // Set stopwatch running flag
    stopwatch_running = 1;
}

// Timer1 Compare Match A ISR (1Hz)
ISR(TIMER1_COMPA_vect) {
    // Increment seconds if stopwatch is running
    if (stopwatch_running) {
        seconds++;

        // Update minutes and reset seconds
        if (seconds >= 60) {
            seconds = 0;
            minutes++;

            // Update hours and reset minutes
            if (minutes >= 60) {
                minutes = 0;
                hours++;
            }
        }
    }
}

int main() {
    // Initialize IO ports
    DDRA = 0xFF; // PORTA as output
    DDRC |= 0x0F; // Lower 4 bits of PORTC as output for 7447 decoder

    // Initialize Timer1 and External Interrupts
    timer1_init();
    external_interrupt_init();

    // Enable internal pull-up for INT0 (Resume)
    PORTB |= (1 << PB2);

    // Set initial values for the 7-segment displays
    PORTC = 0; // Assuming common anode display
    PORTA = 0b00111111; // Assuming common anode display, display "000000"

    // Main loop
    while (1) {
        // Display time on 7-segments
        for (uint8_t i = 0; i < 6; i++) {
            // Assuming common anode display
            PORTC = i; // Set the current display
            PORTA = 0b00111111; // Enable all segments

            // Display the corresponding digit (hours, minutes, or seconds)
            switch (i) {
                case 0: // Display hours
                    PORTA = /* Convert hours to 7-segment code */;
                    break;
                case 1: // Display tens of minutes
                    PORTA = /* Convert tens of minutes to 7-segment code */;
                    break;
                case 2: // Display units of minutes
                    PORTA = /* Convert units of minutes to 7-segment code */;
                    break;
                case 3: // Display tens of seconds
                    PORTA = /* Convert tens of seconds to 7-segment code */;
                    break;
                case 4: // Display units of seconds
                    PORTA = /* Convert units of seconds to 7-segment code */;
                    break;
                case 5: // Display additional information or leave it blank
                    PORTA = 0b00000000;
                    break;
            }

            // Delay to control the display multiplexing
            _delay_ms(5);

            // Disable all displays
            PORTA = 0x00;
        }

        // Update time variables regardless of whether the stopwatch is running
        if (stopwatch_running) {
            seconds++;

            // Update minutes and reset seconds
            if (seconds >= 60) {
                seconds = 0;
                minutes++;

                // Update hours and reset minutes
                if (minutes >= 60) {
                    minutes = 0;
                    hours++;
                }
            }
        }
    }

    return 0;
}
