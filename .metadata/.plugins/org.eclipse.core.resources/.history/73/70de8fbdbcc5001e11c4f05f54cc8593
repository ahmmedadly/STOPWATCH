#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

#define F_CPU 1000000UL // Assuming 1MHz frequency

volatile uint8_t seconds = 0;
volatile uint8_t minutes = 0;
volatile uint8_t hours = 0;

// Function prototypes
void initTimer1(void);
void initInterrupts(void);
void initResetButton(void);
void initPauseButton(void);
void initResumeButton(void);
void updateDisplay(uint8_t digit, uint8_t value);

ISR(TIMER1_COMPA_vect)
{
    seconds++;
    if (seconds == 60)
    {
        seconds = 0;
        minutes++;
        if (minutes == 60)
        {
            minutes = 0;
            hours++;
            if (hours == 12)
            {
                hours = 0;
            }
        }
    }
}

ISR(INT0_vect)
{
    // Reset button pressed
    seconds = 0;
    minutes = 0;
    hours = 0;
    TCCR1B |= (1 << CS10) | (1 << CS11);
}

ISR(INT1_vect)
{
    // Pause button pressed
    TCCR1B &= ~(1 << CS10 | 1 << CS11 | 1 << CS12);
}

ISR(INT2_vect)
{
    // Resume button pressed
    TCCR1B |= (1 << CS10) | (1 << CS11);
}

int main(void)
{
    DDRC = 0x0F;
    PORTC = 0x00;
    DDRA = 0xFF;
    PORTA = 0xFF;

    initResetButton();
    initPauseButton();
    initResumeButton();
    initTimer1();

    while (1)
    {
        for (uint8_t i = 5; i >= 0; i--)
        {
            PORTA = (1 << i);
            PORTC = (i % 2 == 0) ? (seconds % 10) : (seconds / 10);
            _delay_ms(1);
        }
    }
}

void initTimer1(void)
{
    TCCR1A |= (1 << FOC1A) | (1 << FOC1B); // non-pwm mode //
    TCCR1B |= (1 << WGM12) | (1 << CS10) | (1 << CS11); // WGM12>>as ctc mode // 64 prescaler //
    TCNT1 = 0;
    OCR1A = F_CPU / (64 * 1000) - 1; // for 1ms interrupt
    TIMSK |= (1 << OCIE1A);           // enable interrupt when compare matches //
    sei();                            // enable global interrupt //
}

void initInterrupts(void)
{
    sei(); // Enable global interrupts
}

void initResetButton(void)
{
    DDRD &= ~(1 << PD2); // set PD2 as input pin //
    PORTD |= (1 << PD2); // activate internal pull-up //
    EICRA |= (1 << ISC01); // enable interrupt with falling edge //
    EIMSK |= (1 << INT0);  // flag will be set when falling event happens //
}

void initPauseButton(void)
{
    DDRD &= ~(1 << PD3);    // set PD3 as input pin //
    EICRA |= (1 << ISC10);  // enable interrupt with rising edge //
    EIMSK |= (1 << INT1);   // flag will be set when falling event happens //
}

void initResumeButton(void)
{
    DDRB &= ~(1 << PB2); // set PB2 as input pin //
    PORTB |= (1 << PB2); // activate internal pull-up //
    EICRA &= ~(1 << ISC2); // enable interrupt with falling edge  //
    EIMSK |= (1 << INT2);  // flag will be set when falling event happens //
}

void updateDisplay(uint8_t digit, uint8_t value)
{
    PORTA = (1 << digit);
    PORTC = value;
    _delay_ms(1);
    PORTA = 0x00; // Disable all 7-segment displays
}
