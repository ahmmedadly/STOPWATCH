#include <avr/io.h>
#include <avr/interrupt.h>

volatile uint8_t hours = 0;
volatile uint8_t minutes = 0;
volatile uint8_t seconds = 0;
volatile uint8_t stopwatch_running = 1;

void init_timer1_ctc() {
    // Configure Timer1 in CTC mode
    TCCR1B |= (1 << WGM12);
    // Set prescaler to 64
    TCCR1B |= (1 << CS11) | (1 << CS10);
    // Set TOP value for 1s interval
    OCR1A = 15624;
    // Enable Timer1 compare match interrupt
    TIMSK |= (1 << OCIE1A);
}

void init_external_interrupts() {
    // Configure INT0, INT1, and INT2 for external interrupts
    EICRA |= (1 << ISC01) | (1 << ISC11) | (1 << ISC21);
    EIMSK |= (1 << INT0) | (1 << INT1) | (1 << INT2);
}

void init_ports() {
    // Configure PORTA for 7-segment display enable/disable
    DDRA = 0xFF; // Set all pins as output

    // Configure PORTC for 7447 decoder input
    DDRC = 0x0F; // Set first 4 pins as output

    // Configure INT0, INT1, INT2 pins
    DDRD &= ~(1 << DDD2) | (1 << DDD3) | (1 << DDD4);
    PORTD |= (1 << PD2) | (1 << PD3) | (1 << PD4); // Enable internal pull-ups
}

ISR(TIMER1_COMPA_vect) {
    if (stopwatch_running) {
        seconds++;

        if (seconds == 60) {
            seconds = 0;
            minutes++;

            if (minutes == 60) {
                minutes = 0;
                hours++;

                if (hours == 24) {
                    hours = 0;
                }
            }
        }
    }
}

ISR(INT0_vect) {
    // Falling edge detected, reset stopwatch
    seconds = 0;
    minutes = 0;
    hours = 0;
}

ISR(INT1_vect) {
    // Rising edge detected, pause stopwatch
    stopwatch_running = 0;
}

ISR(INT2_vect) {
    // Falling edge detected, resume stopwatch
    stopwatch_running = 1;
}

void display_7seg(uint8_t value, uint8_t position) {
    // Display the value on the specified 7-segment position
    PORTC = value;
    PORTA = (1 << position);
}

int main(void) {
    // Initialize
    init_ports();
    init_timer1_ctc();
    init_external_interrupts();

    // Enable global interrupts
    sei();

    // Display initial state
    display_7seg(0, 0); // Display hours
    display_7seg(0, 2); // Display minutes
    display_7seg(0, 4); // Display seconds

    while (1) {
        // Main loop - nothing to do here, interrupts handle everything
    }

    return 0;
}
