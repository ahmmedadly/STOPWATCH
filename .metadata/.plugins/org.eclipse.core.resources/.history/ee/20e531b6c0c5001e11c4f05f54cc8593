#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

unsigned secound = 0;
unsigned minute = 0;
unsigned hour = 0;

void TIMER1_Init(void) {
    TCCR1A |= (1 << FOC1A) | (1 << FOC1B); // non-pwm mode //
    TCCR1B |= (1 << WGM12) | (1 << CS10) | (1 << CS11); // WGM12>>as ctc mode // 64 prescaler //
    TCNT1 = 0;
    OCR1A = 15625;
    TIMSK |= (1 << OCIE1A); // enable interrupt when compare matches //
    SREG |= (1 << 7); // enable global interrupt //
}

ISR(TIMER1_COMPA_vect) {
    secound++;

    if (secound == 60) {
        secound = 0;
        minute++;
    }

    if (minute == 60) {
        secound = 0;
        minute = 0;
        hour++;
    }

    if (hour == 12) {
        secound = 0;
        minute = 0;
        hour = 0;
    }
}

void INT0_Init_RESET(void) {
    DDRD &= ~(1 << PD2); // set PD2 as input pin //
    PORTD |= (1 << PD2); // activate internal pull-up //
    MCUCR |= (1 << ISC01); // enable interrupt with falling edge //
    GICR |= (1 << INT0); // flag will be set when falling event happened //
    SREG |= (1 << 7); // enable global interrupt //
}

ISR(INT0_vect) {
    secound = 0;
    minute = 0;
    hour = 0;

    TCCR1B |= (1 << CS10) | (1 << CS11);
}

void INT1_Init_PAUSED(void) {
    DDRD &= ~(1 << PD3); // set PD3 as input pin //
    MCUCR |= (1 << ISC10) | (1 << ISC11); // enable interrupt with raising edge //
    GICR |= (1 << INT1); // flag will be set when falling event happened //
    SREG |= (1 << 7); // enable global interrupt //
}

ISR(INT1_vect) {
    // disable clock when paused to stop the timer //
    TCCR1B &= ~(1 << CS10);
    TCCR1B &= ~(1 << CS11);
    TCCR1B &= ~(1 << CS12);
}

void INT2_Init_RESUME(void) {
    DDRB &= ~(1 << PB2); // set PD2 as input pin //
    PORTD |= (1 << PB2); // activate internal pull-up //
    MCUCR &= ~(1 << ISC2); // enable interrupt with falling edge  // when set pin to zero interrupt happened //
    GICR |= (1 << INT2); // flag will be set when falling event happened //
    SREG |= (1 << 7); // enable global interrupt //
}

ISR(INT2_vect) {
    //
    TCCR1B |= (1 << CS10) | (1 << CS11);
}

void update_display(void) {
    PORTA = (1 << 5);
    PORTC = secound % 10;
    _delay_ms(1);

    PORTA = (1 << 4);
    PORTC = secound / 10;
    _delay_ms(1);

    PORTA = (1 << 3);
    PORTC = minute % 10;
    _delay_ms(1);

    PORTA = (1 << 2);
    PORTC = minute / 10;
    _delay_ms(1);

    PORTA = (1 << 1);
    PORTC = hour % 10;
    _delay_ms(1);

    PORTA = (1 << 0);
    PORTC = hour / 10;
    _delay_ms(1);
}

int main(void) {

    DDRC = 0x0F;
    PORTC = 0x00;
    DDRA = 0xFF;
    PORTA = 0xFF;

    INT0_Init_RESET();
    INT1_Init_PAUSED();
    INT2_Init_RESUME();
    TIMER1_Init();

    while (1) {
        update_display();
    }

    return 0;
}
